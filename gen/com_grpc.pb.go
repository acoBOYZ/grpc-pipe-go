// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: com.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PipeService_Communicate_FullMethodName = "/com.PipeService/Communicate"
)

// PipeServiceClient is the client API for PipeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// PipeService provides a bidirectional streaming RPC method named `Communicate`.
//
// This enables both client and server to send and receive `PipeMessage` streams
// in real-time, making it suitable for custom protocol implementations, messaging,
// or RPC-over-stream scenarios.
type PipeServiceClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PipeMessage, PipeMessage], error)
}

type pipeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPipeServiceClient(cc grpc.ClientConnInterface) PipeServiceClient {
	return &pipeServiceClient{cc}
}

func (c *pipeServiceClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PipeMessage, PipeMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PipeService_ServiceDesc.Streams[0], PipeService_Communicate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PipeMessage, PipeMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PipeService_CommunicateClient = grpc.BidiStreamingClient[PipeMessage, PipeMessage]

// PipeServiceServer is the server API for PipeService service.
// All implementations must embed UnimplementedPipeServiceServer
// for forward compatibility.
//
// *
// PipeService provides a bidirectional streaming RPC method named `Communicate`.
//
// This enables both client and server to send and receive `PipeMessage` streams
// in real-time, making it suitable for custom protocol implementations, messaging,
// or RPC-over-stream scenarios.
type PipeServiceServer interface {
	Communicate(grpc.BidiStreamingServer[PipeMessage, PipeMessage]) error
	mustEmbedUnimplementedPipeServiceServer()
}

// UnimplementedPipeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPipeServiceServer struct{}

func (UnimplementedPipeServiceServer) Communicate(grpc.BidiStreamingServer[PipeMessage, PipeMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedPipeServiceServer) mustEmbedUnimplementedPipeServiceServer() {}
func (UnimplementedPipeServiceServer) testEmbeddedByValue()                     {}

// UnsafePipeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipeServiceServer will
// result in compilation errors.
type UnsafePipeServiceServer interface {
	mustEmbedUnimplementedPipeServiceServer()
}

func RegisterPipeServiceServer(s grpc.ServiceRegistrar, srv PipeServiceServer) {
	// If the following call pancis, it indicates UnimplementedPipeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PipeService_ServiceDesc, srv)
}

func _PipeService_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PipeServiceServer).Communicate(&grpc.GenericServerStream[PipeMessage, PipeMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PipeService_CommunicateServer = grpc.BidiStreamingServer[PipeMessage, PipeMessage]

// PipeService_ServiceDesc is the grpc.ServiceDesc for PipeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PipeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.PipeService",
	HandlerType: (*PipeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _PipeService_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "com.proto",
}
